"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _qs = _interopRequireDefault(require("qs"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * A Request object containing all the compiled information about this request.
 *
 * @property {string} host the host used for this API call
 * @property {number} port the port for this API call. Standard set to 443.
 * @property {boolean} ssl wether this API call uses SSL
 * @property {string} scheme the scheme inferred from the SSL state
 * @property {string} verb the HTTP method, for example `GET` or `POST`
 * @property {string} path the full path of the API endpoint
 * @property {Object} params the parameters to pass in the query or body
 * @property {string} queryPath the path and query string used for the API call
 * @property {string} bearerToken the authentication token
 * @property {string} clientVersion the version of the Amadeus library
 * @property {string} languageVersion the version of Node used
 * @property {string} appId the custom ID of the application using this library
 * @property {string} appVersion the custom version of the application
 *  using this library
 * @property {Object} headers the request headers
 *
 * @param {Object} options
 */
var Request = /*#__PURE__*/function () {
  function Request(options) {
    _classCallCheck(this, Request);
    this.host = options.host;
    this.port = options.port;
    this.ssl = options.ssl;
    this.scheme = this.ssl ? 'https' : 'http';
    this.verb = options.verb;
    this.path = options.path;
    this.params = options.params;
    this.queryPath = this.fullQueryPath();
    this.bearerToken = options.bearerToken;
    this.clientVersion = options.clientVersion;
    this.languageVersion = options.languageVersion;
    this.appId = options.appId;
    this.appVersion = options.appVersion;
    this.headers = {
      'User-Agent': this.userAgent(),
      'Accept': 'application/json, application/vnd.amadeus+json'
    };
    this.ListHTTPOverride = ['/v2/shopping/flight-offers', '/v1/shopping/seatmaps', '/v1/shopping/availability/flight-availabilities', '/v2/shopping/flight-offers/prediction', '/v1/shopping/flight-offers/pricing', '/v1/shopping/flight-offers/upselling'];
    this.addAuthorizationHeader();
    this.addContentTypeHeader();
    this.addHTTPOverrideHeader();
  }

  // PROTECTED

  /**
   * Compiles the options for the HTTP request.
   *
   * Used by Client.execute when executing this request against the server.
   *
   * @return {Object} an associative array of options to be passed into the
   *  Client.execute function
   * @protected
   */
  return _createClass(Request, [{
    key: "options",
    value: function options() {
      var options = {
        'host': this.host,
        'port': this.port,
        'protocol': "".concat(this.scheme, ":"),
        'path': this.queryPath,
        'method': this.verb,
        'headers': this.headers
      };
      return options;
    }

    /**
     * Creats the body for the API cal, serializing the params if the verb is POST.
     *
     * @return {string} the serialized params
     * @protected
     */
  }, {
    key: "body",
    value: function body() {
      if (this.verb !== 'POST') {
        return '';
      } else {
        if (!this.bearerToken) {
          return _qs["default"].stringify(this.params);
        }
        return this.params;
      }
    }

    // PRIVATE

    /**
     * Build up the custom User Agent
     *
     * @return {string} a user agent in the format "library/version language/version app/version"
     * @private
     */
  }, {
    key: "userAgent",
    value: function userAgent() {
      var userAgent = "amadeus-node/".concat(this.clientVersion, " node/").concat(this.languageVersion);
      if (!this.appId) {
        return userAgent;
      }
      return "".concat(userAgent, " ").concat(this.appId, "/").concat(this.appVersion);
    }

    /**
     * Build the full query path, combining the path with the query params if the
     * verb is 'GET'. For example: '/foo/bar?baz=qux'
     *
     * @return {string} the path and params combined into one string.
     * @private
     */
  }, {
    key: "fullQueryPath",
    value: function fullQueryPath() {
      if (this.verb === 'POST') {
        return this.path;
      } else {
        return "".concat(this.path, "?").concat(_qs["default"].stringify(this.params));
      }
    }

    /**
     * Adds an Authorization header if the BearerToken is present
     *
     * @private
     */
  }, {
    key: "addAuthorizationHeader",
    value: function addAuthorizationHeader() {
      if (!this.bearerToken) {
        return;
      }
      this.headers['Authorization'] = "Bearer ".concat(this.bearerToken);
    }

    /**
     * Adds an Content-Type header if the HTTP method equals POST
     *
     * @private
     */
  }, {
    key: "addContentTypeHeader",
    value: function addContentTypeHeader() {
      if (this.verb === 'POST' && !this.bearerToken) {
        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';
      } else {
        this.headers['Content-Type'] = 'application/vnd.amadeus+json';
      }
      return;
    }

    /**
    * Adds HTTPOverride method if it is required
    *
    *  @private
    */
  }, {
    key: "addHTTPOverrideHeader",
    value: function addHTTPOverrideHeader() {
      if (this.verb === 'POST' && this.ListHTTPOverride.includes(this.path)) {
        this.headers['X-HTTP-Method-Override'] = 'GET';
      }
      return;
    }
  }]);
}();
var _default = exports["default"] = Request;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,